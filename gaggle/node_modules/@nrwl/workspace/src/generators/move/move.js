"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveSchematic = exports.moveGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const check_destination_1 = require("./lib/check-destination");
const move_project_1 = require("./lib/move-project");
const update_cypress_json_1 = require("./lib/update-cypress-json");
const update_imports_1 = require("./lib/update-imports");
const update_jest_config_1 = require("./lib/update-jest-config");
const update_storybook_config_1 = require("./lib/update-storybook-config");
const update_implicit_dependencies_1 = require("./lib/update-implicit-dependencies");
const update_project_root_files_1 = require("./lib/update-project-root-files");
const update_default_project_1 = require("./lib/update-default-project");
const update_eslintrc_json_1 = require("./lib/update-eslintrc-json");
const move_project_configuration_1 = require("./lib/move-project-configuration");
const update_build_targets_1 = require("./lib/update-build-targets");
function moveGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projectConfig = devkit_1.readProjectConfiguration(tree, schema.projectName);
        check_destination_1.checkDestination(tree, schema, projectConfig);
        move_project_1.moveProject(tree, schema, projectConfig); // we MUST move the project first, if we don't we get a "This should never happen" error ü§¶‚Äç‚ôÄÔ∏è
        update_imports_1.updateImports(tree, schema, projectConfig);
        update_project_root_files_1.updateProjectRootFiles(tree, schema, projectConfig);
        update_cypress_json_1.updateCypressJson(tree, schema, projectConfig);
        update_jest_config_1.updateJestConfig(tree, schema, projectConfig);
        update_storybook_config_1.updateStorybookConfig(tree, schema, projectConfig);
        update_eslintrc_json_1.updateEslintrcJson(tree, schema, projectConfig);
        move_project_configuration_1.moveProjectConfiguration(tree, schema, projectConfig);
        update_build_targets_1.updateBuildTargets(tree, schema);
        update_default_project_1.updateDefaultProject(tree, schema);
        update_implicit_dependencies_1.updateImplicitDependencies(tree, schema);
        if (!schema.skipFormat) {
            yield devkit_1.formatFiles(tree);
        }
    });
}
exports.moveGenerator = moveGenerator;
exports.default = moveGenerator;
exports.moveSchematic = devkit_1.convertNxGenerator(moveGenerator);
//# sourceMappingURL=move.js.map