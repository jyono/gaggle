"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateJestConfig = void 0;
const devkit_1 = require("@nrwl/devkit");
const path = require("path");
const utils_1 = require("./utils");
/**
 * Updates the project name and coverage folder in the jest.config.js if it exists
 *
 * (assume relative paths have been updated previously)
 *
 * @param schema The options provided to the schematic
 */
function updateJestConfig(tree, schema, project) {
    const destination = utils_1.getDestination(tree, schema, project);
    const newProjectName = utils_1.getNewProjectName(schema.destination);
    const jestConfigPath = path.join(destination, 'jest.config.js');
    if (!tree.exists(jestConfigPath)) {
        // nothing to do
        return;
    }
    const oldContent = tree.read(jestConfigPath).toString('utf-8');
    const findName = new RegExp(`'${schema.projectName}'`, 'g');
    const findDir = new RegExp(project.root, 'g');
    const newContent = oldContent
        .replace(findName, `'${newProjectName}'`)
        .replace(findDir, destination);
    tree.write(jestConfigPath, newContent);
    // update root jest.config.js
    const rootJestConfigPath = '/jest.config.js';
    if (!tree.exists(rootJestConfigPath)) {
        return;
    }
    const { libsDir, appsDir } = devkit_1.getWorkspaceLayout(tree);
    const findProject = new RegExp(`<rootDir>\/(${libsDir}|${appsDir})\/${schema.projectName}`, 'g');
    const oldRootJestConfigContent = tree
        .read(rootJestConfigPath)
        .toString('utf-8');
    const newRootJestConfigContent = oldRootJestConfigContent.replace(findProject, `<rootDir>/${destination}`);
    tree.write(rootJestConfigPath, newRootJestConfigContent);
}
exports.updateJestConfig = updateJestConfig;
//# sourceMappingURL=update-jest-config.js.map