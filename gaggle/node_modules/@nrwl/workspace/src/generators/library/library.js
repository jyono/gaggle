"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.librarySchematic = exports.libraryGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const run_tasks_in_serial_1 = require("@nrwl/workspace/src/utilities/run-tasks-in-serial");
const path_1 = require("path");
const { jestProjectGenerator } = require('@nrwl/jest');
const { lintProjectGenerator, Linter } = require('@nrwl/linter');
function addProject(tree, options) {
    devkit_1.addProjectConfiguration(tree, options.name, {
        root: options.projectRoot,
        sourceRoot: devkit_1.joinPathFragments(options.projectRoot, 'src'),
        projectType: 'library',
        targets: {},
        tags: options.parsedTags,
    });
}
function addLint(tree, options) {
    return lintProjectGenerator(tree, {
        project: options.name,
        linter: options.linter,
        skipFormat: true,
        tsConfigPaths: [
            devkit_1.joinPathFragments(options.projectRoot, 'tsconfig.lib.json'),
        ],
        eslintFilePatterns: [
            `${options.projectRoot}/**/*.${options.js ? 'js' : 'ts'}`,
        ],
    });
}
function updateLibTsConfig(tree, options) {
    devkit_1.updateJson(tree, path_1.join(options.projectRoot, 'tsconfig.lib.json'), (json) => {
        if (options.strict) {
            json.compilerOptions = Object.assign(Object.assign({}, json.compilerOptions), { forceConsistentCasingInFileNames: true, strict: true, noImplicitReturns: true, noFallthroughCasesInSwitch: true });
        }
        return json;
    });
}
function updateRootTsConfig(host, options) {
    devkit_1.updateJson(host, 'tsconfig.base.json', (json) => {
        const c = json.compilerOptions;
        c.paths = c.paths || {};
        delete c.paths[options.name];
        if (c.paths[options.importPath]) {
            throw new Error(`You already have a library using the import path "${options.importPath}". Make sure to specify a unique one.`);
        }
        c.paths[options.importPath] = [
            devkit_1.joinPathFragments(options.projectRoot, './src', 'index.' + (options.js ? 'js' : 'ts')),
        ];
        return json;
    });
}
function createFiles(tree, options) {
    const { className, name, propertyName } = devkit_1.names(options.name);
    devkit_1.generateFiles(tree, path_1.join(__dirname, './files/lib'), options.projectRoot, Object.assign(Object.assign({}, options), { dot: '.', className,
        name,
        propertyName, js: !!options.js, cliCommand: 'nx', strict: undefined, tmpl: '', offsetFromRoot: devkit_1.offsetFromRoot(options.projectRoot), hasUnitTestRunner: options.unitTestRunner !== 'none' }));
    if (options.unitTestRunner === 'none') {
        tree.delete(path_1.join(options.projectRoot, 'src/lib', `${options.fileName}.spec.ts`));
    }
    if (options.skipBabelrc) {
        tree.delete(path_1.join(options.projectRoot, '.babelrc'));
    }
    if (options.js) {
        devkit_1.toJS(tree);
    }
    updateLibTsConfig(tree, options);
}
function addJest(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return yield jestProjectGenerator(tree, {
            project: options.name,
            setupFile: 'none',
            supportTsx: true,
            babelJest: options.babelJest,
            skipSerializers: true,
            testEnvironment: options.testEnvironment,
            skipFormat: true,
        });
    });
}
function libraryGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = normalizeOptions(tree, schema);
        createFiles(tree, options);
        if (!options.skipTsConfig) {
            updateRootTsConfig(tree, options);
        }
        addProject(tree, options);
        const tasks = [];
        if (options.linter !== 'none') {
            const lintCallback = yield addLint(tree, options);
            tasks.push(lintCallback);
        }
        if (options.unitTestRunner === 'jest') {
            const jestCallback = yield addJest(tree, options);
            tasks.push(jestCallback);
        }
        if (!options.skipFormat) {
            yield devkit_1.formatFiles(tree);
        }
        return run_tasks_in_serial_1.runTasksInSerial(...tasks);
    });
}
exports.libraryGenerator = libraryGenerator;
exports.default = libraryGenerator;
exports.librarySchematic = devkit_1.convertNxGenerator(libraryGenerator);
function normalizeOptions(tree, options) {
    const name = devkit_1.names(options.name).fileName;
    const projectDirectory = options.directory
        ? `${devkit_1.names(options.directory).fileName}/${name}`
        : name;
    if (!options.unitTestRunner) {
        options.unitTestRunner = 'jest';
    }
    if (!options.linter) {
        options.linter = Linter.EsLint;
    }
    const projectName = projectDirectory.replace(new RegExp('/', 'g'), '-');
    const fileName = getCaseAwareFileName({
        fileName: options.simpleModuleName ? name : projectName,
        pascalCaseFiles: options.pascalCaseFiles,
    });
    const { libsDir, npmScope } = devkit_1.getWorkspaceLayout(tree);
    const projectRoot = `${libsDir}/${projectDirectory}`;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const defaultImportPath = `@${npmScope}/${projectDirectory}`;
    const importPath = options.importPath || defaultImportPath;
    return Object.assign(Object.assign({}, options), { fileName, name: projectName, projectRoot,
        projectDirectory,
        parsedTags,
        importPath });
}
function getCaseAwareFileName(options) {
    const normalized = devkit_1.names(options.fileName);
    return options.pascalCaseFiles ? normalized.className : normalized.fileName;
}
//# sourceMappingURL=library.js.map