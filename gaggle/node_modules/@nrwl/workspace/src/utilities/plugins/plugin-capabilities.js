"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listPluginCapabilities = exports.getPluginCapabilities = void 0;
const chalk = require("chalk");
const package_manager_1 = require("@nrwl/tao/src/shared/package-manager");
const app_root_1 = require("../app-root");
const fileutils_1 = require("../fileutils");
const output_1 = require("../output");
const shared_1 = require("./shared");
function tryGetCollection(workspaceRoot, pluginName, jsonFile, propName) {
    if (!jsonFile) {
        return null;
    }
    try {
        const jsonFilePath = require.resolve(`${pluginName}/${jsonFile}`, {
            paths: [workspaceRoot],
        });
        return fileutils_1.readJsonFile(jsonFilePath)[propName];
    }
    catch (_a) {
        return null;
    }
}
function getPluginCapabilities(workspaceRoot, pluginName) {
    try {
        const packageJsonPath = require.resolve(`${pluginName}/package.json`, {
            paths: [workspaceRoot],
        });
        const packageJson = fileutils_1.readJsonFile(packageJsonPath);
        return {
            name: pluginName,
            generators: tryGetCollection(workspaceRoot, pluginName, packageJson.generators, 'generators') ||
                tryGetCollection(workspaceRoot, pluginName, packageJson.schematics, 'schematics'),
            executors: tryGetCollection(workspaceRoot, pluginName, packageJson.executors, 'executors') ||
                tryGetCollection(workspaceRoot, pluginName, packageJson.builders, 'builders'),
        };
    }
    catch (_a) {
        return null;
    }
}
exports.getPluginCapabilities = getPluginCapabilities;
function listPluginCapabilities(pluginName) {
    const plugin = getPluginCapabilities(app_root_1.appRootPath, pluginName);
    if (!plugin) {
        const pmc = package_manager_1.getPackageManagerCommand();
        output_1.output.note({
            title: `${pluginName} is not currently installed`,
            bodyLines: [
                `Use "${pmc.addDev} ${pluginName}" to install the plugin.`,
                `After that, use "${pmc.exec} nx g ${pluginName}:init" to add the required peer deps and initialize the plugin.`,
            ],
        });
        return;
    }
    const hasBuilders = shared_1.hasElements(plugin.executors);
    const hasGenerators = shared_1.hasElements(plugin.generators);
    if (!hasBuilders && !hasGenerators) {
        output_1.output.warn({ title: `No capabilities found in ${pluginName}` });
        return;
    }
    const bodyLines = [];
    if (hasGenerators) {
        bodyLines.push(chalk.bold(chalk.green('GENERATORS')));
        bodyLines.push('');
        bodyLines.push(...Object.keys(plugin.generators).map((name) => `${chalk.bold(name)} : ${plugin.generators[name].description}`));
        if (hasBuilders) {
            bodyLines.push('');
        }
    }
    if (hasBuilders) {
        bodyLines.push(chalk.bold(chalk.green('EXECUTORS/BUILDERS')));
        bodyLines.push('');
        bodyLines.push(...Object.keys(plugin.executors).map((name) => `${chalk.bold(name)} : ${plugin.executors[name].description}`));
    }
    output_1.output.log({
        title: `Capabilities in ${plugin.name}:`,
        bodyLines,
    });
}
exports.listPluginCapabilities = listPluginCapabilities;
//# sourceMappingURL=plugin-capabilities.js.map