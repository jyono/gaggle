/*
 * Babel preset to provide TypeScript support and module/nomodule for Nx.
 */
module.exports = function (api, options = {}) {
    var _a, _b;
    api.assertVersion(7);
    const isModern = api.caller((caller) => caller === null || caller === void 0 ? void 0 : caller.isModern);
    const emitDecoratorMetadata = api.caller((caller) => { var _a; return (_a = caller === null || caller === void 0 ? void 0 : caller.emitDecoratorMetadata) !== null && _a !== void 0 ? _a : true; });
    return {
        presets: [
            // Support module/nomodule pattern.
            [
                require.resolve('@babel/preset-env'),
                // For Jest tests, NODE_ENV is set as 'test' and we only want to set target as Node.
                // All other options will fail in Jest since Node does not support some ES features
                // such as import syntax.
                process.env.NODE_ENV === 'test'
                    ? { targets: { node: 'current' } }
                    : {
                        // Allow importing core-js in entrypoint and use browserlist to select polyfills.
                        // This is needed for differential loading as well.
                        useBuiltIns: 'entry',
                        corejs: 3,
                        // Do not transform modules to CJS
                        modules: false,
                        targets: isModern ? { esmodules: true } : undefined,
                        bugfixes: true,
                        // Exclude transforms that make all code slower
                        exclude: ['transform-typeof-symbol'],
                    },
            ],
            require.resolve('@babel/preset-typescript'),
        ],
        plugins: [
            require.resolve('babel-plugin-macros'),
            emitDecoratorMetadata
                ? require.resolve('babel-plugin-transform-typescript-metadata')
                : undefined,
            // Must use legacy decorators to remain compatible with TypeScript.
            [
                require.resolve('@babel/plugin-proposal-decorators'),
                (_a = options.decorators) !== null && _a !== void 0 ? _a : { legacy: true },
            ],
            [
                require.resolve('@babel/plugin-proposal-class-properties'),
                (_b = options.classProperties) !== null && _b !== void 0 ? _b : { loose: true },
            ],
        ].filter(Boolean),
        overrides: [
            // Convert `const enum` to `enum`. The former cannot be supported by babel
            // but at least we can get it to not error out.
            {
                test: /\.tsx?$/,
                plugins: [
                    [
                        require.resolve('babel-plugin-const-enum'),
                        {
                            transform: 'removeConst',
                        },
                    ],
                ],
            },
        ],
    };
};
//# sourceMappingURL=babel.js.map