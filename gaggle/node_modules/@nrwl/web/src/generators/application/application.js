"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationSchematic = exports.applicationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const run_tasks_in_serial_1 = require("@nrwl/workspace/src/utilities/run-tasks-in-serial");
const path_1 = require("path");
const init_1 = require("../init/init");
const cypress_1 = require("@nrwl/cypress");
const linter_1 = require("@nrwl/linter");
const jest_1 = require("@nrwl/jest");
function createApplicationFiles(tree, options) {
    devkit_1.generateFiles(tree, path_1.join(__dirname, './files/app'), options.appProjectRoot, Object.assign(Object.assign(Object.assign({}, options), devkit_1.names(options.name)), { tmpl: '', offsetFromRoot: devkit_1.offsetFromRoot(options.appProjectRoot) }));
    if (options.unitTestRunner === 'none') {
        tree.delete(path_1.join(options.appProjectRoot, './src/app/app.element.spec.ts'));
    }
}
function addBuildTarget(project, options) {
    const buildOptions = {
        outputPath: devkit_1.joinPathFragments('dist', options.appProjectRoot),
        index: devkit_1.joinPathFragments(options.appProjectRoot, 'src/index.html'),
        main: devkit_1.joinPathFragments(options.appProjectRoot, 'src/main.ts'),
        polyfills: devkit_1.joinPathFragments(options.appProjectRoot, 'src/polyfills.ts'),
        tsConfig: devkit_1.joinPathFragments(options.appProjectRoot, 'tsconfig.app.json'),
        assets: [
            devkit_1.joinPathFragments(options.appProjectRoot, 'src/favicon.ico'),
            devkit_1.joinPathFragments(options.appProjectRoot, 'src/assets'),
        ],
        styles: [
            devkit_1.joinPathFragments(options.appProjectRoot, `src/styles.${options.style}`),
        ],
        scripts: [],
    };
    const productionBuildOptions = {
        fileReplacements: [
            {
                replace: devkit_1.joinPathFragments(options.appProjectRoot, `src/environments/environment.ts`),
                with: devkit_1.joinPathFragments(options.appProjectRoot, `src/environments/environment.prod.ts`),
            },
        ],
        optimization: true,
        outputHashing: 'all',
        sourceMap: false,
        extractCss: true,
        namedChunks: false,
        extractLicenses: true,
        vendorChunk: false,
        budgets: [
            {
                type: 'initial',
                maximumWarning: '2mb',
                maximumError: '5mb',
            },
        ],
    };
    return Object.assign(Object.assign({}, project), { targets: Object.assign(Object.assign({}, project.targets), { build: {
                executor: '@nrwl/web:build',
                outputs: ['{options.outputPath}'],
                options: buildOptions,
                configurations: {
                    production: productionBuildOptions,
                },
            } }) });
}
function addServeTarget(project, options) {
    const serveTarget = {
        executor: '@nrwl/web:dev-server',
        options: {
            buildTarget: `${options.projectName}:build`,
        },
        configurations: {
            production: {
                buildTarget: `${options.projectName}:build:production`,
            },
        },
    };
    return Object.assign(Object.assign({}, project), { targets: Object.assign(Object.assign({}, project.targets), { serve: serveTarget }) });
}
function addProject(tree, options) {
    const targets = {};
    let project = {
        projectType: 'application',
        root: options.appProjectRoot,
        sourceRoot: devkit_1.joinPathFragments(options.appProjectRoot, 'src'),
        tags: options.parsedTags,
        targets,
    };
    project = addBuildTarget(project, options);
    project = addServeTarget(project, options);
    devkit_1.addProjectConfiguration(tree, options.projectName, project);
    const workspace = devkit_1.readWorkspaceConfiguration(tree);
    if (!workspace.defaultProject) {
        workspace.defaultProject = options.projectName;
        devkit_1.updateWorkspaceConfiguration(tree, workspace);
    }
}
function setDefaults(tree, options) {
    const workspace = devkit_1.readWorkspaceConfiguration(tree);
    workspace.generators = workspace.generators || {};
    workspace.generators['@nrwl/web:application'] = Object.assign({ style: options.style, linter: options.linter, unitTestRunner: options.unitTestRunner, e2eTestRunner: options.e2eTestRunner }, workspace.generators['@nrwl/web:application']);
    workspace.generators['@nrwl/web:library'] = Object.assign({ style: options.style, linter: options.linter, unitTestRunner: options.unitTestRunner }, workspace.generators['@nrwl/web:library']);
    devkit_1.updateWorkspaceConfiguration(tree, workspace);
}
function applicationGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = normalizeOptions(host, schema);
        const tasks = [];
        const webTask = yield init_1.webInitGenerator(host, Object.assign(Object.assign({}, options), { skipFormat: true }));
        tasks.push(webTask);
        createApplicationFiles(host, options);
        addProject(host, options);
        const lintTask = yield linter_1.lintProjectGenerator(host, {
            linter: options.linter,
            project: options.projectName,
            tsConfigPaths: [
                devkit_1.joinPathFragments(options.appProjectRoot, 'tsconfig.app.json'),
            ],
            eslintFilePatterns: [`${options.appProjectRoot}/**/*.ts`],
            skipFormat: true,
        });
        tasks.push(lintTask);
        if (options.e2eTestRunner === 'cypress') {
            const cypressTask = yield cypress_1.cypressProjectGenerator(host, Object.assign(Object.assign({}, options), { name: options.name + '-e2e', directory: options.directory, project: options.projectName }));
            tasks.push(cypressTask);
        }
        if (options.unitTestRunner === 'jest') {
            const jestTask = yield jest_1.jestProjectGenerator(host, {
                project: options.projectName,
                skipSerializers: true,
                setupFile: 'web-components',
                babelJest: options.babelJest,
            });
            tasks.push(jestTask);
        }
        setDefaults(host, options);
        if (!schema.skipFormat) {
            yield devkit_1.formatFiles(host);
        }
        return run_tasks_in_serial_1.runTasksInSerial(...tasks);
    });
}
exports.applicationGenerator = applicationGenerator;
function normalizeOptions(host, options) {
    const appDirectory = options.directory
        ? `${devkit_1.names(options.directory).fileName}/${devkit_1.names(options.name).fileName}`
        : devkit_1.names(options.name).fileName;
    const { appsDir, npmScope: defaultPrefix } = devkit_1.getWorkspaceLayout(host);
    const appProjectName = appDirectory.replace(new RegExp('/', 'g'), '-');
    const e2eProjectName = `${appProjectName}-e2e`;
    const appProjectRoot = `${appsDir}/${appDirectory}`;
    const e2eProjectRoot = `${appsDir}/${appDirectory}-e2e`;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    options.style = options.style || 'css';
    options.linter = options.linter || linter_1.Linter.EsLint;
    options.unitTestRunner = options.unitTestRunner || 'jest';
    options.e2eTestRunner = options.e2eTestRunner || 'cypress';
    return Object.assign(Object.assign({}, options), { prefix: options.prefix ? options.prefix : defaultPrefix, name: devkit_1.names(options.name).fileName, projectName: appProjectName, appProjectRoot,
        e2eProjectRoot,
        e2eProjectName,
        parsedTags });
}
exports.default = applicationGenerator;
exports.applicationSchematic = devkit_1.convertNxGenerator(applicationGenerator);
//# sourceMappingURL=application.js.map