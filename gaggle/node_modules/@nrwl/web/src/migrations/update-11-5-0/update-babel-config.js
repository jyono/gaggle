"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateBabelConfig = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
function updateBabelConfig(host) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = devkit_1.getProjects(host);
        if (host.exists('babel.config.json')) {
            devkit_1.updateJson(host, 'babel.config.json', (json) => {
                if (Array.isArray(json.presets)) {
                    json.presets = json.presets.filter((x) => x !== '@nrwl/web/babel');
                }
                return json;
            });
        }
        projects.forEach((p) => {
            const babelrcPath = `${p.root}/.babelrc`;
            // Add `@nrwl/web/babel` to projects that did not previously use it.
            // This is needed because we removed it from the root.
            if (host.exists(babelrcPath)) {
                devkit_1.updateJson(host, babelrcPath, (json) => {
                    json.presets = json.presets || [];
                    if (-1 ===
                        json.presets.findIndex((x) => x === '@nrwl/web/babel' ||
                            x === '@nrwl/react/babel' ||
                            x === '@nrwl/next/babel' ||
                            x === '@nrwl/gatsby/babel')) {
                        json.presets.push('@nrwl/web/babel');
                    }
                    return json;
                });
                // Non-buildable libraries might be included in applications that
                // require .babelrc to exist and contain '@nrwl/web/babel' preset
            }
            else if (p.projectType === 'library') {
                host.write(babelrcPath, JSON.stringify({ presets: ['@nrwl/web/babel'] }, null, 2));
            }
        });
        yield devkit_1.formatFiles(host);
    });
}
exports.updateBabelConfig = updateBabelConfig;
exports.default = updateBabelConfig;
//# sourceMappingURL=update-babel-config.js.map