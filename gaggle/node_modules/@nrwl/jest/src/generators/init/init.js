"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jestInitSchematic = exports.jestInitGenerator = void 0;
const versions_1 = require("../../utils/versions");
const devkit_1 = require("@nrwl/devkit");
const schemaDefaults = {
    babelJest: false,
};
function removeNrwlJestFromDeps(host) {
    devkit_1.updateJson(host, 'package.json', (json) => {
        // check whether updating the package.json is necessary
        if (json.dependencies && json.dependencies['@nrwl/jest']) {
            delete json.dependencies['@nrwl/jest'];
        }
        return json;
    });
}
function createJestConfig(host) {
    if (!host.exists('jest.config.js')) {
        host.write('jest.config.js', devkit_1.stripIndents `
  module.exports = {
    projects: []
  };`);
    }
    if (!host.exists('jest.preset.js')) {
        host.write('jest.preset.js', `
      const nxPreset = require('@nrwl/jest/preset');
     
      module.exports = { ...nxPreset }`);
    }
}
function updateDependencies(tree, options) {
    const devDeps = {
        '@nrwl/jest': versions_1.nxVersion,
        jest: versions_1.jestVersion,
        '@types/jest': versions_1.jestTypesVersion,
        'ts-jest': versions_1.tsJestVersion,
    };
    if (options.babelJest) {
        devDeps['@babel/core'] = versions_1.babelCoreVersion;
        devDeps['@babel/preset-env'] = versions_1.babelPresetEnvVersion;
        devDeps['@babel/preset-typescript'] = versions_1.babelPresetTypescriptVersion;
        devDeps['@babel/preset-react'] = versions_1.babelPresetReactVersion;
        devDeps['babel-jest'] = versions_1.babelJestVersion;
    }
    return devkit_1.addDependenciesToPackageJson(tree, {}, devDeps);
}
function updateExtensions(host) {
    if (!host.exists('.vscode/extensions.json')) {
        return;
    }
    devkit_1.updateJson(host, '.vscode/extensions.json', (json) => {
        json.recommendations = json.recommendations || [];
        const extension = 'firsttris.vscode-jest-runner';
        if (!json.recommendations.includes(extension)) {
            json.recommendations.push(extension);
        }
        return json;
    });
}
function jestInitGenerator(tree, schema) {
    const options = normalizeOptions(schema);
    createJestConfig(tree);
    const installTask = updateDependencies(tree, options);
    removeNrwlJestFromDeps(tree);
    updateExtensions(tree);
    return installTask;
}
exports.jestInitGenerator = jestInitGenerator;
function normalizeOptions(options) {
    return Object.assign(Object.assign({}, schemaDefaults), options);
}
exports.default = jestInitGenerator;
exports.jestInitSchematic = devkit_1.convertNxGenerator(jestInitGenerator);
//# sourceMappingURL=init.js.map