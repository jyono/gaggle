"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressProjectSchematic = exports.cypressProjectGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const linter_1 = require("@nrwl/linter");
const run_tasks_in_serial_1 = require("@nrwl/workspace/src/utilities/run-tasks-in-serial");
const path_1 = require("path");
const versions_1 = require("../../utils/versions");
function createFiles(host, options) {
    devkit_1.generateFiles(host, path_1.join(__dirname, './files'), options.projectRoot, Object.assign(Object.assign({ tmpl: '' }, options), { project: options.project || 'Project', ext: options.js ? 'js' : 'ts', offsetFromRoot: devkit_1.offsetFromRoot(options.projectRoot) }));
    if (options.js) {
        devkit_1.toJS(host);
    }
}
function addProject(host, options) {
    devkit_1.addProjectConfiguration(host, options.projectName, {
        root: options.projectRoot,
        sourceRoot: devkit_1.joinPathFragments(options.projectRoot, 'src'),
        projectType: 'application',
        targets: {
            e2e: {
                executor: '@nrwl/cypress:cypress',
                options: {
                    cypressConfig: devkit_1.joinPathFragments(options.projectRoot, 'cypress.json'),
                    tsConfig: devkit_1.joinPathFragments(options.projectRoot, 'tsconfig.e2e.json'),
                    devServerTarget: `${options.project}:serve`,
                },
                configurations: {
                    production: {
                        devServerTarget: `${options.project}:serve:production`,
                    },
                },
            },
        },
        tags: [],
        implicitDependencies: options.project ? [options.project] : undefined,
    });
}
function addLinter(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const installTask = yield linter_1.lintProjectGenerator(host, {
            project: options.projectName,
            linter: options.linter,
            skipFormat: true,
            tsConfigPaths: [
                devkit_1.joinPathFragments(options.projectRoot, 'tsconfig.e2e.json'),
            ],
            eslintFilePatterns: [
                `${options.projectRoot}/**/*.${options.js ? 'js' : '{js,ts}'}`,
            ],
        });
        if (!options.linter || options.linter !== linter_1.Linter.EsLint) {
            return installTask;
        }
        const installTask2 = devkit_1.addDependenciesToPackageJson(host, {}, { 'eslint-plugin-cypress': versions_1.eslintPluginCypressVersion });
        devkit_1.updateJson(host, path_1.join(options.projectRoot, '.eslintrc.json'), (json) => {
            json.extends = ['plugin:cypress/recommended', ...json.extends];
            json.overrides = [
                /**
                 * In order to ensure maximum efficiency when typescript-eslint generates TypeScript Programs
                 * behind the scenes during lint runs, we need to make sure the project is configured to use its
                 * own specific tsconfigs, and not fall back to the ones in the root of the workspace.
                 */
                {
                    files: ['*.ts', '*.tsx', '*.js', '*.jsx'],
                    parserOptions: {
                        project: `${options.projectRoot}/tsconfig.*?.json`,
                    },
                    /**
                     * Having an empty rules object present makes it more obvious to the user where they would
                     * extend things from if they needed to
                     */
                    rules: {},
                },
                /**
                 * We need this override because we enabled allowJS in the tsconfig to allow for JS based Cypress tests.
                 * That however leads to issues with the CommonJS Cypress plugin file.
                 */
                {
                    files: ['src/plugins/index.js'],
                    rules: {
                        '@typescript-eslint/no-var-requires': 'off',
                        'no-undef': 'off',
                    },
                },
            ];
            return json;
        });
        return run_tasks_in_serial_1.runTasksInSerial(installTask, installTask2);
    });
}
function cypressProjectGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = normalizeOptions(host, schema);
        createFiles(host, options);
        addProject(host, options);
        const installTask = yield addLinter(host, options);
        if (!options.skipFormat) {
            yield devkit_1.formatFiles(host);
        }
        return installTask;
    });
}
exports.cypressProjectGenerator = cypressProjectGenerator;
function normalizeOptions(host, options) {
    const { appsDir } = devkit_1.getWorkspaceLayout(host);
    const projectName = options.directory
        ? devkit_1.names(options.directory).fileName + '-' + options.name
        : options.name;
    const projectRoot = options.directory
        ? devkit_1.joinPathFragments(appsDir, devkit_1.names(options.directory).fileName, options.name)
        : devkit_1.joinPathFragments(appsDir, options.name);
    options.linter = options.linter || linter_1.Linter.EsLint;
    return Object.assign(Object.assign({}, options), { projectName,
        projectRoot });
}
exports.default = cypressProjectGenerator;
exports.cypressProjectSchematic = devkit_1.convertNxGenerator(cypressProjectGenerator);
//# sourceMappingURL=cypress-project.js.map