"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storiesSchematic = exports.storiesGenerator = exports.createAllStories = exports.projectRootPath = void 0;
const tslib_1 = require("tslib");
const component_story_1 = require("../component-story/component-story");
const component_cypress_spec_1 = require("../component-cypress-spec/component-cypress-spec");
const ast_utils_1 = require("../../utils/ast-utils");
const ts = require("typescript");
const devkit_1 = require("@nrwl/devkit");
const path_1 = require("path");
function projectRootPath(tree, sourceRoot, projectType) {
    let projectDir = '';
    if (projectType === 'application') {
        // apps/test-app/src/app
        projectDir = 'app';
    }
    else if (projectType == 'library') {
        // libs/test-lib/src/lib
        projectDir = 'lib';
    }
    return devkit_1.joinPathFragments(sourceRoot, projectDir);
}
exports.projectRootPath = projectRootPath;
function containsComponentDeclaration(tree, componentPath) {
    const contents = tree.read(componentPath);
    if (!contents) {
        throw new Error(`Failed to read ${componentPath}`);
    }
    const sourceFile = ts.createSourceFile(componentPath, contents.toString(), ts.ScriptTarget.Latest, true);
    return !!ast_utils_1.getComponentName(sourceFile);
}
function createAllStories(tree, projectName, generateCypressSpecs, js) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const projects = devkit_1.getProjects(tree);
        const project = projects.get(projectName);
        const { sourceRoot, projectType } = project;
        const libPath = projectRootPath(tree, sourceRoot, projectType);
        let componentPaths = [];
        devkit_1.visitNotIgnoredFiles(tree, libPath, (path) => {
            if ((path.endsWith('.tsx') && !path.endsWith('.spec.tsx')) ||
                (path.endsWith('.js') && !path.endsWith('.spec.js')) ||
                (path.endsWith('.jsx') && !path.endsWith('.spec.jsx'))) {
                componentPaths.push(path);
            }
        });
        yield Promise.all(componentPaths.map((componentPath) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const relativeCmpDir = componentPath.replace(path_1.join(sourceRoot, '/'), '');
            if (!containsComponentDeclaration(tree, componentPath)) {
                return;
            }
            yield component_story_1.default(tree, {
                componentPath: relativeCmpDir,
                project: projectName,
            });
            if (generateCypressSpecs) {
                yield component_cypress_spec_1.default(tree, {
                    project: projectName,
                    componentPath: relativeCmpDir,
                    js,
                });
            }
        })));
    });
}
exports.createAllStories = createAllStories;
function storiesGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield createAllStories(host, schema.project, schema.generateCypressSpecs, schema.js);
    });
}
exports.storiesGenerator = storiesGenerator;
exports.default = storiesGenerator;
exports.storiesSchematic = devkit_1.convertNxGenerator(storiesGenerator);
//# sourceMappingURL=stories.js.map