"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentStorySchematic = exports.componentStoryGenerator = exports.createComponentStoriesFile = exports.getKnobDefaultValue = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const ts = require("typescript");
const ast_utils_1 = require("../../utils/ast-utils");
// TODO: candidate to refactor with the angular component story
function getKnobDefaultValue(property) {
    const typeNameToDefault = {
        [ts.SyntaxKind.StringKeyword]: "''",
        [ts.SyntaxKind.NumberKeyword]: 0,
        [ts.SyntaxKind.BooleanKeyword]: false,
    };
    const resolvedValue = typeNameToDefault[property];
    if (typeof resolvedValue === undefined) {
        return "''";
    }
    else {
        return resolvedValue;
    }
}
exports.getKnobDefaultValue = getKnobDefaultValue;
function createComponentStoriesFile(host, { 
// name,
project, componentPath, }) {
    const proj = devkit_1.getProjects(host).get(project);
    const sourceRoot = proj.sourceRoot;
    // TODO: Remove this entirely, given we don't support TSLint with React?
    const usesEsLint = true;
    const componentFilePath = devkit_1.joinPathFragments(sourceRoot, componentPath);
    const componentDirectory = componentFilePath.replace(componentFilePath.slice(componentFilePath.lastIndexOf('/')), '');
    const isPlainJs = componentFilePath.endsWith('.jsx');
    let fileExt = 'tsx';
    if (componentFilePath.endsWith('.jsx')) {
        fileExt = 'jsx';
    }
    else if (componentFilePath.endsWith('.js')) {
        fileExt = 'js';
    }
    const componentFileName = componentFilePath
        .slice(componentFilePath.lastIndexOf('/') + 1)
        .replace('.tsx', '')
        .replace('.jsx', '')
        .replace('.js', '');
    const name = componentFileName;
    const contents = host.read(componentFilePath);
    if (!contents) {
        throw new Error(`Failed to read ${componentFilePath}`);
    }
    const sourceFile = ts.createSourceFile(componentFilePath, contents.toString(), ts.ScriptTarget.Latest, true);
    const cmpDeclaration = ast_utils_1.getComponentName(sourceFile);
    if (!cmpDeclaration) {
        throw new Error(`Could not find any React component in file ${componentFilePath}`);
    }
    const propsInterface = ast_utils_1.getComponentPropsInterface(sourceFile);
    let propsTypeName = null;
    let props = [];
    if (propsInterface) {
        propsTypeName = propsInterface.name.text;
        props = propsInterface.members.map((member) => {
            const initializerKindToKnobType = {
                [ts.SyntaxKind.StringKeyword]: 'text',
                [ts.SyntaxKind.NumberKeyword]: 'number',
                [ts.SyntaxKind.BooleanKeyword]: 'boolean',
            };
            return {
                name: member.name.text,
                type: initializerKindToKnobType[member.type.kind],
                defaultValue: getKnobDefaultValue(member.type.kind),
            };
        });
    }
    devkit_1.generateFiles(host, devkit_1.joinPathFragments(__dirname, './files'), devkit_1.normalizePath(componentDirectory), {
        componentFileName: name,
        propsTypeName,
        props,
        usedKnobs: props.map((x) => x.type).join(', '),
        componentName: cmpDeclaration.name.text,
        isPlainJs,
        fileExt,
        usesEsLint,
    });
}
exports.createComponentStoriesFile = createComponentStoriesFile;
function componentStoryGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        createComponentStoriesFile(host, schema);
        yield devkit_1.formatFiles(host);
    });
}
exports.componentStoryGenerator = componentStoryGenerator;
exports.default = componentStoryGenerator;
exports.componentStorySchematic = devkit_1.convertNxGenerator(componentStoryGenerator);
//# sourceMappingURL=component-story.js.map