"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addProject = void 0;
const devkit_1 = require("@nrwl/devkit");
function addProject(host, options) {
    const nxConfig = {
        tags: options.parsedTags,
    };
    const project = {
        root: options.appProjectRoot,
        sourceRoot: `${options.appProjectRoot}/src`,
        projectType: 'application',
        targets: {
            build: createBuildTarget(options),
            serve: createServeTarget(options),
        },
    };
    devkit_1.addProjectConfiguration(host, options.projectName, Object.assign(Object.assign({}, project), nxConfig));
}
exports.addProject = addProject;
function maybeJs(options, path) {
    return options.js && (path.endsWith('.ts') || path.endsWith('.tsx'))
        ? path.replace(/\.tsx?$/, '.js')
        : path;
}
function createBuildTarget(options) {
    return {
        executor: '@nrwl/web:build',
        outputs: ['{options.outputPath}'],
        options: {
            outputPath: devkit_1.joinPathFragments('dist', options.appProjectRoot),
            index: devkit_1.joinPathFragments(options.appProjectRoot, 'src/index.html'),
            main: devkit_1.joinPathFragments(options.appProjectRoot, maybeJs(options, `src/main.tsx`)),
            polyfills: devkit_1.joinPathFragments(options.appProjectRoot, maybeJs(options, 'src/polyfills.ts')),
            tsConfig: devkit_1.joinPathFragments(options.appProjectRoot, 'tsconfig.app.json'),
            assets: [
                devkit_1.joinPathFragments(options.appProjectRoot, 'src/favicon.ico'),
                devkit_1.joinPathFragments(options.appProjectRoot, 'src/assets'),
            ],
            styles: options.styledModule || !options.hasStyles
                ? []
                : [
                    devkit_1.joinPathFragments(options.appProjectRoot, `src/styles.${options.style}`),
                ],
            scripts: [],
            webpackConfig: '@nrwl/react/plugins/webpack',
        },
        configurations: {
            production: {
                fileReplacements: [
                    {
                        replace: devkit_1.joinPathFragments(options.appProjectRoot, maybeJs(options, `src/environments/environment.ts`)),
                        with: devkit_1.joinPathFragments(options.appProjectRoot, maybeJs(options, `src/environments/environment.prod.ts`)),
                    },
                ],
                optimization: true,
                outputHashing: 'all',
                sourceMap: false,
                extractCss: true,
                namedChunks: false,
                extractLicenses: true,
                vendorChunk: false,
                budgets: [
                    {
                        type: 'initial',
                        maximumWarning: '2mb',
                        maximumError: '5mb',
                    },
                ],
            },
        },
    };
}
function createServeTarget(options) {
    return {
        executor: '@nrwl/web:dev-server',
        options: {
            buildTarget: `${options.projectName}:build`,
        },
        configurations: {
            production: {
                buildTarget: `${options.projectName}:build:production`,
            },
        },
    };
}
//# sourceMappingURL=add-project.js.map