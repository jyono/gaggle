"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applicationSchematic = exports.applicationGenerator = void 0;
const tslib_1 = require("tslib");
const lint_1 = require("../../utils/lint");
const create_application_files_1 = require("./lib/create-application-files");
const update_jest_config_1 = require("./lib/update-jest-config");
const normalize_options_1 = require("./lib/normalize-options");
const add_project_1 = require("./lib/add-project");
const add_cypress_1 = require("./lib/add-cypress");
const add_jest_1 = require("./lib/add-jest");
const add_routing_1 = require("./lib/add-routing");
const set_defaults_1 = require("./lib/set-defaults");
const add_styled_dependencies_1 = require("../../rules/add-styled-dependencies");
const devkit_1 = require("@nrwl/devkit");
const run_tasks_in_serial_1 = require("@nrwl/workspace/src/utilities/run-tasks-in-serial");
const init_1 = require("../init/init");
const linter_1 = require("@nrwl/linter");
function addLinting(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const lintTask = yield linter_1.lintProjectGenerator(host, {
            linter: options.linter,
            project: options.projectName,
            tsConfigPaths: [
                devkit_1.joinPathFragments(options.appProjectRoot, 'tsconfig.app.json'),
            ],
            eslintFilePatterns: [`${options.appProjectRoot}/**/*.{ts,tsx,js,jsx}`],
            skipFormat: true,
        });
        tasks.push(lintTask);
        const reactEslintJson = lint_1.createReactEslintJson(options.appProjectRoot);
        devkit_1.updateJson(host, devkit_1.joinPathFragments(options.appProjectRoot, '.eslintrc.json'), () => reactEslintJson);
        const installTask = yield devkit_1.addDependenciesToPackageJson(host, lint_1.extraEslintDependencies.dependencies, lint_1.extraEslintDependencies.devDependencies);
        tasks.push(installTask);
        return run_tasks_in_serial_1.runTasksInSerial(...tasks);
    });
}
function applicationGenerator(host, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = normalize_options_1.normalizeOptions(host, schema);
        const initTask = yield init_1.default(host, Object.assign(Object.assign({}, options), { skipFormat: true }));
        create_application_files_1.createApplicationFiles(host, options);
        add_project_1.addProject(host, options);
        const lintTask = yield addLinting(host, options);
        const cypressTask = yield add_cypress_1.addCypress(host, options);
        const jestTask = yield add_jest_1.addJest(host, options);
        update_jest_config_1.updateJestConfig(host, options);
        const styledTask = add_styled_dependencies_1.addStyledModuleDependencies(host, options.styledModule);
        const routingTask = add_routing_1.addRouting(host, options);
        set_defaults_1.setDefaults(host, options);
        if (!options.skipFormat) {
            yield devkit_1.formatFiles(host);
        }
        return run_tasks_in_serial_1.runTasksInSerial(initTask, lintTask, cypressTask, jestTask, styledTask, routingTask);
    });
}
exports.applicationGenerator = applicationGenerator;
exports.default = applicationGenerator;
exports.applicationSchematic = devkit_1.convertNxGenerator(applicationGenerator);
//# sourceMappingURL=application.js.map