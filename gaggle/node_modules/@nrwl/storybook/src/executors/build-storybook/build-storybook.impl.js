"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const os_1 = require("os");
const fs_1 = require("fs");
const build = require("@storybook/core/standalone");
const utils_1 = require("../utils");
const devkit_1 = require("@nrwl/devkit");
try {
    require('dotenv').config();
}
catch (e) { }
function buildStorybookExecutor(options, context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        devkit_1.logger.info(`NX ui framework: ${options.uiFramework}`);
        const frameworkPath = `${options.uiFramework}/dist/server/options`;
        const { default: frameworkOptions } = yield Promise.resolve().then(() => require(frameworkPath));
        const option = storybookOptionMapper(options, frameworkOptions, context);
        devkit_1.logger.info(`NX Storybook builder starting ...`);
        yield runInstance(option);
        devkit_1.logger.info(`NX Storybook builder finished ...`);
        devkit_1.logger.info(`NX Storybook files available in ${options.outputPath}`);
        return { success: true };
    });
}
exports.default = buildStorybookExecutor;
function runInstance(options) {
    return build(Object.assign(Object.assign({}, options), { ci: true }));
}
function storybookOptionMapper(builderOptions, frameworkOptions, context) {
    utils_1.setStorybookAppProject(context, builderOptions.projectBuildConfig);
    const storybookConfig = findOrCreateConfig(builderOptions.config, context);
    const optionsWithFramework = Object.assign(Object.assign(Object.assign(Object.assign({}, builderOptions), { mode: 'static', outputDir: builderOptions.outputPath, configDir: storybookConfig }), frameworkOptions), { frameworkPresets: [...(frameworkOptions.frameworkPresets || [])], watch: false });
    optionsWithFramework.config;
    return optionsWithFramework;
}
function findOrCreateConfig(config, context) {
    if (config.configFolder && fs_1.statSync(config.configFolder).isDirectory()) {
        return config.configFolder;
    }
    else if (fs_1.statSync(config.configPath).isFile() &&
        fs_1.statSync(config.pluginPath).isFile() &&
        fs_1.statSync(config.srcRoot).isFile()) {
        return createStorybookConfig(config.configPath, config.pluginPath, config.srcRoot);
    }
    else {
        const sourceRoot = context.workspace.projects[context.projectName].root;
        if (fs_1.statSync(path_1.join(context.root, sourceRoot, '.storybook')).isDirectory()) {
            return path_1.join(context.root, sourceRoot, '.storybook');
        }
    }
    throw new Error('No configuration settings');
}
function createStorybookConfig(configPath, pluginPath, srcRoot) {
    const tmpDir = os_1.tmpdir();
    const tmpFolder = fs_1.mkdtempSync(`${tmpDir}${path_1.sep}`);
    fs_1.copyFileSync(configPath, `${tmpFolder}${path_1.basename(configPath)}`, fs_1.constants.COPYFILE_EXCL);
    fs_1.copyFileSync(pluginPath, `${tmpFolder}${path_1.basename(pluginPath)}`, fs_1.constants.COPYFILE_EXCL);
    fs_1.copyFileSync(srcRoot, `${tmpFolder}${path_1.basename(srcRoot)}`, fs_1.constants.COPYFILE_EXCL);
    return tmpFolder;
}
//# sourceMappingURL=build-storybook.impl.js.map