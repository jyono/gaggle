"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const os_1 = require("os");
const fs_1 = require("fs");
const server_1 = require("@storybook/core/server");
const utils_1 = require("../utils");
try {
    require('dotenv').config();
}
catch (e) { }
function storybookExecutor(options, context) {
    return tslib_1.__asyncGenerator(this, arguments, function* storybookExecutor_1() {
        const frameworkPath = `${options.uiFramework}/dist/server/options`;
        const frameworkOptions = (yield tslib_1.__await(Promise.resolve().then(() => require(frameworkPath)))).default;
        const option = storybookOptionMapper(options, frameworkOptions, context);
        yield tslib_1.__await(runInstance(option));
        yield yield tslib_1.__await({ success: true });
        // This Promise intentionally never resolves, leaving the process running
        yield tslib_1.__await(new Promise(() => { }));
    });
}
exports.default = storybookExecutor;
function runInstance(options) {
    return server_1.buildDevStandalone(Object.assign(Object.assign({}, options), { ci: true }));
}
function storybookOptionMapper(builderOptions, frameworkOptions, context) {
    utils_1.setStorybookAppProject(context, builderOptions.projectBuildConfig);
    const storybookConfig = findOrCreateConfig(builderOptions.config, context);
    const optionsWithFramework = Object.assign(Object.assign(Object.assign(Object.assign({}, builderOptions), { mode: 'dev', configDir: storybookConfig }), frameworkOptions), { frameworkPresets: [...(frameworkOptions.frameworkPresets || [])] });
    optionsWithFramework.config;
    return optionsWithFramework;
}
function findOrCreateConfig(config, context) {
    const sourceRoot = context.workspace.projects[context.projectName].root;
    if (config.configFolder && fs_1.statSync(config.configFolder).isDirectory()) {
        return config.configFolder;
    }
    else if (fs_1.statSync(config.configPath).isFile() &&
        fs_1.statSync(config.pluginPath).isFile() &&
        fs_1.statSync(config.srcRoot).isFile()) {
        return createStorybookConfig(config.configPath, config.pluginPath, config.srcRoot);
    }
    else if (fs_1.statSync(path_1.join(context.root, sourceRoot, '.storybook')).isDirectory()) {
        return path_1.join(context.root, sourceRoot, '.storybook');
    }
    throw new Error('No configuration settings');
}
function createStorybookConfig(configPath, pluginPath, srcRoot) {
    const tmpDir = os_1.tmpdir();
    const tmpFolder = `${tmpDir}${path_1.sep}`;
    fs_1.mkdtempSync(tmpFolder);
    fs_1.copyFileSync(configPath, `${tmpFolder}/${path_1.basename(configPath)}`, fs_1.constants.COPYFILE_EXCL);
    fs_1.copyFileSync(pluginPath, `${tmpFolder}/${path_1.basename(pluginPath)}`, fs_1.constants.COPYFILE_EXCL);
    fs_1.copyFileSync(srcRoot, `${tmpFolder}/${path_1.basename(srcRoot)}`, fs_1.constants.COPYFILE_EXCL);
    return tmpFolder;
}
//# sourceMappingURL=storybook.impl.js.map