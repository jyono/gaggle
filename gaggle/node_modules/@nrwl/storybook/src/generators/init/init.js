"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initSchematic = exports.initGenerator = exports.addCacheableOperation = void 0;
const devkit_1 = require("@nrwl/devkit");
const versions_1 = require("../../utils/versions");
const utilities_1 = require("../../utils/utilities");
function checkDependenciesInstalled(host, schema) {
    const packageJson = devkit_1.readJson(host, 'package.json');
    const devDependencies = {};
    const dependencies = {};
    packageJson.dependencies = packageJson.dependencies || {};
    packageJson.devDependencices = packageJson.devDependencices || {};
    // base deps
    devDependencies['@nrwl/storybook'] = versions_1.nxVersion;
    devDependencies['@types/webpack'] = versions_1.webpackTypesVersion;
    /**
     * If Storybook already exists, do NOT update it to the latest version.
     * Leave it alone.
     */
    if (!packageJson.dependencies['@storybook/addon-knobs'] &&
        !packageJson.devDependencies['@storybook/addon-knobs']) {
        devDependencies['@storybook/addon-knobs'] = versions_1.storybookVersion;
    }
    if (utilities_1.isFramework('angular', schema)) {
        if (!packageJson.dependencies['@storybook/angular'] &&
            !packageJson.devDependencies['@storybook/angular']) {
            devDependencies['@storybook/angular'] = versions_1.storybookVersion;
        }
        if (!packageJson.dependencies['@angular/forms'] &&
            !packageJson.devDependencies['@angular/forms']) {
            devDependencies['@angular/forms'] = '*';
        }
    }
    if (utilities_1.isFramework('react', schema)) {
        devDependencies['@storybook/react'] = versions_1.storybookVersion;
        devDependencies['@svgr/webpack'] = versions_1.svgrVersion;
        devDependencies['url-loader'] = versions_1.urlLoaderVersion;
        devDependencies['babel-loader'] = versions_1.babelLoaderVersion;
        devDependencies['@babel/core'] = versions_1.babelCoreVersion;
        devDependencies['@babel/preset-typescript'] = versions_1.babelPresetTypescriptVersion;
        if (!packageJson.dependencies['@storybook/react'] &&
            !packageJson.devDependencies['@storybook/react']) {
            devDependencies['@storybook/react'] = versions_1.storybookVersion;
        }
    }
    if (utilities_1.isFramework('html', schema)) {
        devDependencies['@storybook/html'] = versions_1.storybookVersion;
    }
    return devkit_1.addDependenciesToPackageJson(host, dependencies, devDependencies);
}
function addCacheableOperation(tree) {
    const workspace = devkit_1.readWorkspaceConfiguration(tree);
    if (!workspace.tasksRunnerOptions ||
        !workspace.tasksRunnerOptions.default ||
        workspace.tasksRunnerOptions.default.runner !==
            '@nrwl/workspace/tasks-runners/default') {
        return;
    }
    workspace.tasksRunnerOptions.default.options =
        workspace.tasksRunnerOptions.default.options || {};
    workspace.tasksRunnerOptions.default.options.cacheableOperations =
        workspace.tasksRunnerOptions.default.options.cacheableOperations || [];
    if (!workspace.tasksRunnerOptions.default.options.cacheableOperations.includes('build-storybook')) {
        workspace.tasksRunnerOptions.default.options.cacheableOperations.push('build-storybook');
    }
    devkit_1.updateWorkspaceConfiguration(tree, workspace);
}
exports.addCacheableOperation = addCacheableOperation;
function moveToDevDependencies(tree) {
    devkit_1.updateJson(tree, 'package.json', (packageJson) => {
        packageJson.dependencies = packageJson.dependencies || {};
        packageJson.devDependencies = packageJson.devDependencies || {};
        if (packageJson.dependencies['@nrwl/storybook']) {
            packageJson.devDependencies['@nrwl/storybook'] =
                packageJson.dependencies['@nrwl/storybook'];
            delete packageJson.dependencies['@nrwl/storybook'];
        }
        return packageJson;
    });
}
function initGenerator(tree, schema) {
    const installTask = checkDependenciesInstalled(tree, schema);
    moveToDevDependencies(tree);
    addCacheableOperation(tree);
    return installTask;
}
exports.initGenerator = initGenerator;
exports.default = initGenerator;
exports.initSchematic = devkit_1.convertNxGenerator(initGenerator);
//# sourceMappingURL=init.js.map