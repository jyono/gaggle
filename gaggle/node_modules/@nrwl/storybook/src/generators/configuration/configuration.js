"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationSchematic = exports.configurationGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const run_tasks_in_serial_1 = require("@nrwl/workspace/src/utilities/run-tasks-in-serial");
const linter_1 = require("@nrwl/linter");
const path_1 = require("path");
const utilities_1 = require("../../utils/utilities");
const cypress_project_1 = require("../cypress-project/cypress-project");
const versions_1 = require("../../utils/versions");
const init_1 = require("../init/init");
function configurationGenerator(tree, rawSchema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const schema = normalizeSchema(rawSchema);
        const tasks = [];
        const workspaceStorybookVersion = readCurrentWorkspaceStorybookVersion(tree);
        const { projectType } = devkit_1.readProjectConfiguration(tree, schema.name);
        const initTask = yield init_1.initGenerator(tree, {
            uiFramework: schema.uiFramework,
        });
        tasks.push(initTask);
        createRootStorybookDir(tree, schema.name, schema.js, workspaceStorybookVersion);
        createProjectStorybookDir(tree, schema.name, schema.uiFramework, schema.js, workspaceStorybookVersion);
        configureTsProjectConfig(tree, schema);
        configureTsSolutionConfig(tree, schema);
        updateLintConfig(tree, schema);
        addStorybookTask(tree, schema.name, schema.uiFramework);
        if (schema.configureCypress && projectType !== 'application') {
            const cypressTask = yield cypress_project_1.cypressProjectGenerator(tree, {
                name: schema.name,
                js: schema.js,
                linter: schema.linter,
            });
            tasks.push(cypressTask);
        }
        else {
            devkit_1.logger.warn('There is already an e2e project setup');
        }
        yield devkit_1.formatFiles(tree);
        return run_tasks_in_serial_1.runTasksInSerial(...tasks);
    });
}
exports.configurationGenerator = configurationGenerator;
function normalizeSchema(schema) {
    const defaults = {
        configureCypress: true,
        linter: linter_1.Linter.TsLint,
        js: false,
    };
    return Object.assign(Object.assign({}, defaults), schema);
}
function createRootStorybookDir(tree, projectName, js, workspaceStorybookVersion) {
    const { projectType } = devkit_1.readProjectConfiguration(tree, projectName);
    const projectDirectory = projectType === 'application' ? 'app' : 'lib';
    devkit_1.logger.debug(`adding .storybook folder to ${projectDirectory} -\n
  based on the Storybook version installed: ${workspaceStorybookVersion}, we'll bootstrap a scaffold for that particular version.`);
    const templatePath = path_1.join(__dirname, workspaceStorybookVersion === '6' ? './root-files' : './root-files-5');
    devkit_1.generateFiles(tree, templatePath, '', {});
    if (js) {
        devkit_1.toJS(tree);
    }
}
function createProjectStorybookDir(tree, projectName, uiFramework, js, workspaceStorybookVersion) {
    /**
     * Here, same as above
     * Check storybook version
     * and use the correct folder
     * lib-files-5 or lib-files-6
     */
    const { root, projectType } = devkit_1.readProjectConfiguration(tree, projectName);
    const projectDirectory = projectType === 'application' ? 'app' : 'lib';
    if (tree.exists(path_1.join(root, '.storybook'))) {
        return;
    }
    devkit_1.logger.debug(`adding .storybook folder to ${projectDirectory} - using Storybook version ${workspaceStorybookVersion}`);
    const templatePath = path_1.join(__dirname, workspaceStorybookVersion === '6' ? './project-files' : './project-files-5');
    devkit_1.generateFiles(tree, templatePath, root, {
        tmpl: '',
        uiFramework,
        offsetFromRoot: devkit_1.offsetFromRoot(root),
        projectType: projectDirectory,
    });
    if (js) {
        devkit_1.toJS(tree);
    }
}
function getTsConfigPath(tree, projectName, path) {
    const { root, projectType } = devkit_1.readProjectConfiguration(tree, projectName);
    return path_1.join(root, path && path.length > 0
        ? path
        : projectType === 'application'
            ? 'tsconfig.app.json'
            : 'tsconfig.lib.json');
}
function configureTsProjectConfig(tree, schema) {
    const { name: projectName } = schema;
    let tsConfigPath;
    let tsConfigContent;
    try {
        tsConfigPath = getTsConfigPath(tree, projectName);
        tsConfigContent = devkit_1.readJson(tree, tsConfigPath);
    }
    catch (_a) {
        /**
         * Custom app configurations
         * may contain a tsconfig.json
         * instead of a tsconfig.app.json.
         */
        tsConfigPath = getTsConfigPath(tree, projectName, 'tsconfig.json');
        tsConfigContent = devkit_1.readJson(tree, tsConfigPath);
    }
    tsConfigContent.exclude = [
        ...(tsConfigContent.exclude || []),
        '**/*.stories.ts',
        '**/*.stories.js',
        ...(utilities_1.isFramework('react', schema)
            ? ['**/*.stories.jsx', '**/*.stories.tsx']
            : []),
    ];
    devkit_1.writeJson(tree, tsConfigPath, tsConfigContent);
}
function configureTsSolutionConfig(tree, schema) {
    const { name: projectName } = schema;
    const { root } = devkit_1.readProjectConfiguration(tree, projectName);
    const tsConfigPath = path_1.join(root, 'tsconfig.json');
    const tsConfigContent = devkit_1.readJson(tree, tsConfigPath);
    tsConfigContent.references = [
        ...(tsConfigContent.references || []),
        {
            path: './.storybook/tsconfig.json',
        },
    ];
    devkit_1.writeJson(tree, tsConfigPath, tsConfigContent);
}
/**
 * When adding storybook we need to inform TSLint or ESLint
 * of the additional tsconfig.json file which will be the only tsconfig
 * which includes *.stories files.
 *
 * For TSLint this is done via the builder config, for ESLint this is
 * done within the .eslintrc.json file.
 */
function updateLintConfig(tree, schema) {
    const { name: projectName } = schema;
    const { targets, root } = devkit_1.readProjectConfiguration(tree, projectName);
    const tslintTargets = Object.values(targets).filter((target) => target.executor === '@angular-devkit/build-angular:tslint');
    tslintTargets.forEach((target) => {
        target.options.tsConfig = dedupe([
            ...target.options.tsConfig,
            devkit_1.joinPathFragments(root, './.storybook/tsconfig.json'),
        ]);
    });
    if (tree.exists(path_1.join(root, '.eslintrc.json'))) {
        devkit_1.updateJson(tree, path_1.join(root, '.eslintrc.json'), (json) => {
            var _a, _b, _c, _d;
            if (typeof ((_a = json.parserOptions) === null || _a === void 0 ? void 0 : _a.project) === 'string') {
                json.parserOptions.project = [json.parserOptions.project];
            }
            if (Array.isArray((_b = json.parserOptions) === null || _b === void 0 ? void 0 : _b.project)) {
                json.parserOptions.project = dedupe([
                    ...json.parserOptions.project,
                    path_1.join(root, '.storybook/tsconfig.json'),
                ]);
            }
            const overrides = json.overrides || [];
            for (const override of overrides) {
                if (typeof ((_c = override.parserOptions) === null || _c === void 0 ? void 0 : _c.project) === 'string') {
                    override.parserOptions.project = [override.parserOptions.project];
                }
                if (Array.isArray((_d = override.parserOptions) === null || _d === void 0 ? void 0 : _d.project)) {
                    override.parserOptions.project = dedupe([
                        ...override.parserOptions.project,
                        path_1.join(root, '.storybook/tsconfig.json'),
                    ]);
                }
            }
            return json;
        });
    }
}
function dedupe(arr) {
    return Array.from(new Set(arr));
}
function addStorybookTask(tree, projectName, uiFramework) {
    const projectConfig = devkit_1.readProjectConfiguration(tree, projectName);
    projectConfig.targets['storybook'] = {
        executor: '@nrwl/storybook:storybook',
        options: {
            uiFramework,
            port: 4400,
            config: {
                configFolder: `${projectConfig.root}/.storybook`,
            },
        },
        configurations: {
            ci: {
                quiet: true,
            },
        },
    };
    projectConfig.targets['build-storybook'] = {
        executor: '@nrwl/storybook:build',
        outputs: ['{options.outputPath}'],
        options: {
            uiFramework,
            outputPath: devkit_1.joinPathFragments('dist/storybook', projectName),
            config: {
                configFolder: `${projectConfig.root}/.storybook`,
            },
        },
        configurations: {
            ci: {
                quiet: true,
            },
        },
    };
    devkit_1.updateProjectConfiguration(tree, projectName, projectConfig);
}
function readCurrentWorkspaceStorybookVersion(tree) {
    const packageJsonContents = devkit_1.readJson(tree, 'package.json');
    let workspaceStorybookVersion = versions_1.storybookVersion;
    if (packageJsonContents && packageJsonContents['devDependencies']) {
        if (packageJsonContents['devDependencies']['@storybook/angular']) {
            workspaceStorybookVersion =
                packageJsonContents['devDependencies']['@storybook/angular'];
        }
        if (packageJsonContents['devDependencies']['@storybook/react']) {
            workspaceStorybookVersion =
                packageJsonContents['devDependencies']['@storybook/react'];
        }
        if (packageJsonContents['devDependencies']['@storybook/core']) {
            workspaceStorybookVersion =
                packageJsonContents['devDependencies']['@storybook/core'];
        }
    }
    if (packageJsonContents && packageJsonContents['dependencies']) {
        if (packageJsonContents['dependencies']['@storybook/angular']) {
            workspaceStorybookVersion =
                packageJsonContents['dependencies']['@storybook/angular'];
        }
        if (packageJsonContents['dependencies']['@storybook/react']) {
            workspaceStorybookVersion =
                packageJsonContents['dependencies']['@storybook/react'];
        }
        if (packageJsonContents['dependencies']['@storybook/core']) {
            workspaceStorybookVersion =
                packageJsonContents['dependencies']['@storybook/core'];
        }
    }
    if (workspaceStorybookVersion.startsWith('6') ||
        workspaceStorybookVersion.startsWith('^6')) {
        workspaceStorybookVersion = '6';
    }
    return workspaceStorybookVersion;
}
exports.default = configurationGenerator;
exports.configurationSchematic = devkit_1.convertNxGenerator(configurationGenerator);
//# sourceMappingURL=configuration.js.map